apiVersion: v1
kind: Template

labels:
  application: demo4-gesture

metadata:
  name: demo4-gesture

parameters:
  - name: APPLICATION_NAME
    value: 'demo4-gesture'
    required: true
  - name: REPLICAS
    value: "1"
    required: true
  - name: PORT
    value: '8080'
    required: true
  - name: IP
    value: '0.0.0.0'
    required: true
  - name: IMAGE_REPOSITORY
    displayName: Image Repository
    value: quay.io/redhatdemo/demo4-gesture:latest
    required: true
  - name: SECRET_KEY
    description: Secret key for the flask app
    displayName: Flask Secret
    required: true
  - name: S3_ENDPOINT
    description: endpoint URL for s3 service
    displayName: S3 Endpoint
    value: 'https://s3.amazonaws.com'
    required: false
  - name: S3_REGION
    description: AWS Region
    displayName: AWS Region
    value: 'us-east-1'
    required: false
  - name: S3_BUCKET
    description: Bucket name for s3
    displayName: S3 Bucket
    required: false
  - name: S3_PREFIX
    description: Prefix to prepend to file keys in s3 (top level directory)
    displayName: S3 Prefix
    value: ''
    required: false
  - name: S3_ACCESS_KEY_ID
    description: S3 Access Key ID with read and write permissions
    displayName: S3 Access Key ID
    required: false
  - name: S3_SECRET_ACCESS_KEY
    description: S3 Secret Access Key
    displayName: S3 Secret Access Key
    required: false

objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${APPLICATION_NAME}
    data:
    stringData:
      S3_ACCESS_KEY_ID: "${S3_ACCESS_KEY_ID}"
      S3_SECRET_ACCESS_KEY: "${S3_SECRET_ACCESS_KEY}"
      S3_ENDPOINT: "${S3_ENDPOINT}"
      S3_REGION: "${S3_REGION}"
      S3_BUCKET: "${S3_BUCKET}"
      S3_PREFIX: "${S3_PREFIX}"
      SECRET_KEY: "${SECRET_KEY}"

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        deploymentConfig: ${APPLICATION_NAME}
        app: ${APPLICATION_NAME}
    spec:
      replicas: ${REPLICAS}
      selector:
        deploymentConfig: ${APPLICATION_NAME}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            deploymentConfig: ${APPLICATION_NAME}
            app: ${APPLICATION_NAME}
        spec:
          containers:
            - envFrom:
                - secretRef:
                    name: ${APPLICATION_NAME}
              image: ${IMAGE_REPOSITORY}
              imagePullPolicy: Always
              name: ${APPLICATION_NAME}
              resources: {}
              terminationMessagePath: /dev/termination-log
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
              livenessProbe:
                httpGet:
                  path: /status
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
          dnsPolicy: ClusterFirst
          restartPolicy: Always
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentConfig: ${APPLICATION_NAME}

